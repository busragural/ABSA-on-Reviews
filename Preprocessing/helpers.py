
def clean_text(text): #ardisik ayni 3 harfi teke d√ºs√ºr√ºr
    import re
    cleaned_text = re.sub(r'(.)\1{3,}', r'\1', text)  
    return cleaned_text

def detect_smiley(text): 
    smileys = {
        ':)': 'smiley_positive ',
        ':-)': 'smiley_positive ',
        ':(': 'smiley_negative ',
        ':-(': 'smiley_negative ',
        ':D': 'smiley_very_positive ',
        ':-D': 'smiley_very_positive ',
        ':|': 'smiley_neutral '
    }

    for smiley, replacement in smileys.items():
        text = text.replace(smiley, replacement)
    
    return text

def detect_language(text):
    from langdetect import detect
    language = detect(text)
    return language

def translate_to_english(text):
    from googletrans import Translator
    translator = Translator()
    translation = translator.translate(text, dest='en')
    return translation.text

def safe_detect(text):
    from langdetect import detect
    try:
        # Bo≈ü metin veya √ßok kƒ±sa metin kontrol√º
        if text.strip() == '' or len(text) < 3:
            return 'unknown'  # Dil belirlenemeyen metinler i√ßin 'unknown' d√∂nebiliriz
        return detect(text)
    except:
        return 'unknown' 
    

def extract_emojis(text):
    import demoji
    emoji_dict = demoji.findall(text)
    if bool(emoji_dict):
        return emoji_dict
    else:
        return False
    
'''
def replace_emoji(text):
    emojis = {
        '‚òπ' : 'sad',
        '‚ò∫' : 'smile',
        '‚ô•' : 'love',
        '‚úîÔ∏è' : 'check_mark',
        'üéâ' : 'celebration',
        'üëå' : 'okay',
        'üëåüèª' : 'okay',
        'üëåüèº' : 'okay',
        'üëåüèΩ' : 'okay',
        'üëç' : 'thumbs_up',
        'üëçüèª' : 'thumbs_up',
        'üëçüèº' : 'thumbs_up',
        'üëé' : 'thumbs_down',
        'üëéüèª' : 'thumbs_down',
        'üëéüèº' : 'thumbs_down',
        'üëè' : 'clap',
        'üëèüèª' : 'clap',
        'üíì' : 'heartbeat',
        'üíï' : 'two_hearts',
        'üíô' : 'blue_heart',
        'üíö' : 'green_heart',
        'üíõ' : 'yellow_heart',
        'üíú' : 'purple_heart',
        'üß°' : 'orange_heart',
        'üñ§' : 'black_heart',
        'üíØ' : 'perfect',
        'üòÄ' : 'grin',
        'üòÅ' : 'grinning',
        'üòÇ' : 'laughing',
        'üòÉ' : 'smile',
        'üòÑ' : 'big_smile',
        'üòÖ' : 'sweat_smile',
        'üòÜ' : 'laugh',
        'üòá' : 'angel',
        'üòä' : 'blush',
        'üòã' : 'yummy',
        'üòç' : 'heart_eyes',
        'üòà' : 'devilish',
        'üòâ' : 'wink',
        'üòä' : 'blush',
        'üòã' : 'yummy',
        'üòå' : 'relieved',
        'üòç' : 'heart_eyes',
        'üòé' : 'sunglasses',
        'üòê' : 'neutral',
        'üòë' : 'expressionless',
        'üòí' : 'unamused',
        'üòì' : 'sweat',
        'üòî' : 'pensive',
        'üòï' : 'confused',
        'üòñ' : 'disappointed',
        'üòò' : 'blowing_kiss',
        'üòö' : 'kiss',
        'üòõ' : 'tongue',
        'üòú' : 'winking_tongue',
        'üòù' : 'crazy_tongue',
        'üò†' : 'angry',
        'üò°' : 'mad',
        'üò¢' : 'cry',
        'üò£' : 'persevere',
        'üò§' : 'triumph',
        'üò•' : 'sad',
        'üò©' : 'weary',
        'üò™' : 'sleepy',
        'üò¨' : 'grimace',
        'üò≠' : 'sob',
        'üòØ' : 'surprised',
        'üò≤' : 'astonished',
        'üò≥' : 'flushed',
        'üò∑' : 'mask',
        'üôÅ' : 'frowning',
        'üôÇ' : 'slightly_smiling',
        'üôÉ' : 'upside_down',
        'üôÑ' : 'rolling_eyes',
        'üôè' : 'pray',
        'üôèüèª' : 'pray',
        'üôèüèΩ' : 'pray',
        'ü§ê' : 'zipper_mouth',
        'ü§î' : 'thinking',
        'ü§ó' : 'hugging',
        'ü§¢' : 'nauseated',
        'ü§£' : 'rofl',
        'ü§§' : 'drooling',
        'ü§®' : 'raised_eyebrow',
        'ü§©' : 'star_struck',
        'ü§™' : 'crazy_face',
        'ü§¨' : 'cursing',
        'ü§≠' : 'hand_over_mouth',
        'ü§Æ' : 'vomit',
        'ü•∞' : 'smiling_hearts',
        'ü•≥' : 'partying',
        'ü•µ' : 'hot_face',
    }

    for emoji_char, keyword in emojis.items():
        text = text.replace(emoji_char, keyword)
    return text
'''
    
def replace_emoji(text):
    import emoji
    return emoji.demojize(text)


